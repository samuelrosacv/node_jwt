let jwt,server,UserModel;_d32‍.w("./setup/db");_d32‍.w("./setup/jwt",[["*",null,function(v){jwt=v}]]);_d32‍.w("./setup/server",[["server",["server"],function(v){server=v}]]);_d32‍.w("./models//user",[["UserModel",["UserModel"],function(v){UserModel=v}]]);




server.post('/signup', async (req, res) => {
    try {
        const result = await UserModel.create(req.body);
        const { password, ... user} = result.toObject();
        const token = jwt.sign(
            { user: user.id }
        );
        _d32‍.g.console.log({user, token});
        res.send({user, token});        
    } catch (error) {
        res.send(400, error);        
    }
})

server.get('/login', async (req, res) => {
    const [hashType, hash] = req.headers.authorization.split[' '];
    const credentials = Buffer.from(hash, 'base64').toString

    _d32‍.g.console.log(credentials);
    
    try {
        const user = await UserModel.findOne( {email, password})
        if(!User){
            return res.send(401);
        }
        res.send(user);        
    } catch (error) {
        res.send(400, error);        
    }
})

server.start();